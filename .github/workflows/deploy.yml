name: LAMP deploy to AWS

on:
  workflow_dispatch:

jobs:
  infrastructure:
    name: Building infrastructure
    runs-on: ubuntu-latest

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASS: ${{ secrets.DB_PASS }}
      DB_NAME: "lampStack"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform -chdir=terraform-config init
      
      - name: Terraform Apply
        run: |
          terraform -chdir=terraform-config \
          apply \
          -auto-approve \
          -var 'db_root_password=$DB_PASS' \
          -var 'db_root_name=$DB_USER'

      - name: Upload tfstate file
        uses: actions/upload-artifact@v3
        with:
          name: terraform.tfstate
          path: terraform-config/terraform.tfstate

      - name: Installing Ansible
        run: |
          sudo apt update -y
          sudo apt install software-properties-common -y
          sudo apt-add-repository --yes --update ppa:ansible/ansible
          sudo apt install ansible -y

      - name: Making inventory file
        run: |
          sed -i "s/ubuntu-server-1-address/$(terraform output -raw webserver-1-public-ip)/" ansible-config/inventory.yml
          sed -i "s/ubuntu-server-2-address/$(terraform output -raw webserver-2-public-ip)/" ansible-config/inventory.yml
          export DB_HOST=$(terraform output -raw mysql-hostname)

      - name: Ansible Playbook
        run: |
          ansible-playbook -i ansible-config/inventory.yml ansible-config/apache.yml \
          --extra-vars "db_host=$DB_HOST db_user=$DB_USER db_pass=$DB_PASSWORD db_name=$DB_NAME"
